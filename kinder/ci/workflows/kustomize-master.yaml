version: 1
summary: |
  This workflow implements a sequence of tasks used for testing alternative
  discovery methods for kubeadm join.
vars:
  kubernetesVersion: "{{ resolve `ci/latest` }}"
  baseImage: kindest/base:v20190819-26e1eb5
  image: kindest/node:test
  clusterName: kinder-kustomize
tasks:
  - name: pull-base-image
    description: |
      pulls kindest/base image with docker in docker and all the prerequisites necessary for running kind(er)
    cmd: docker
    args:
      - pull
      - "{{ .vars.baseImage }}"
  - name: add-kubernetes-versions
    description: |
      creates a node-image-variant by adding Kubernetes version "kubernetesVersion"
      to be used when executing "kinder do kubeadm-init"
    cmd: kinder
    args:
      - build
      - node-image-variant
      - --base-image={{ .vars.baseImage }}
      - --image={{ .vars.image }}
      - --with-init-artifacts={{ .vars.kubernetesVersion }}
      - --with-upgrade-artifacts={{ .vars.kubernetesVersion }}
      - --loglevel=debug
    timeout: 10m
  - name: create-cluster
    description: |
      create a set of nodes ready for hosting the Kubernetes cluster
    cmd: kinder
    args:
      - create
      - cluster
      - --name={{ .vars.clusterName }}
      - --image={{ .vars.image }}
      - --control-plane-nodes=2
      - --worker-nodes=1
      - --loglevel=debug
    timeout: 5m
  - name: prepare kustomize pathches
    cmd: /bin/sh
    args:
      - -c
      - |
        mkdir -p /tmp/kubeadm-patches

        cat <<EOF >/tmp/kubeadm-patches/patch1.yaml
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-apiserver
          namespace: kube-system
          annotations:
            kustomize: kube-apiserver
        EOF

        cat <<EOF >/tmp/kubeadm-patches/patch2.yaml
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-controller-manager
          namespace: kube-system
          annotations:
            kustomize: kube-controller-manager
        EOF

        cat <<EOF >/tmp/kubeadm-patches/patch3.yaml
        apiVersion: v1
        kind: Pod
        metadata:
          name: kube-scheduler
          namespace: kube-system
          annotations:
            kustomize: kube-scheduler
        EOF

        cat <<EOF >/tmp/kubeadm-patches/patch4.yaml
        apiVersion: v1
        kind: Pod
        metadata:
          name: etcd
          namespace: kube-system
          annotations:
            kustomize: etcd
        EOF
  - name: prepare verify-kustomize.sh script
    cmd: /bin/sh
    args:
      - -c
      - |
        cat <<EOF >/tmp/verify-kustomize.sh
        #!/usr/bin/env bash
        res=0
        for d in /etc/kubernetes/manifests/*.yaml; do
          if grep -q "kustomize: \$(basename \$d .yaml)" \$d ; then
              echo "\$d is kustomized!"
          else
              echo "ERROR: \$d is not kustomized"
              res=1
          fi
        done

        if [[ "\${res}" = 0 ]]; then
          echo "All verify checks passed, congrats!"
          echo ""
        else
          echo "One or more verify checks failed! See output above..."
          echo ""
          exit 1
        fi
        EOF

        chmod +x /tmp/verify-kustomize.sh
  - name: copy verify-kustomize.sh on controlplane nodes
    cmd: kinder
    args:
      - cp
      - --name={{ .vars.clusterName }}
      - /tmp/verify-kustomize.sh
      - "@cp*:/kinder/verify-kustomize.sh"
  - name: init
    description: |
      Initializes the Kubernetes cluster with version "kubernetesVersion"
      by starting the bootstrap control-plane node
    cmd: kinder
    args:
      - do
      - kubeadm-init
      - --name={{ .vars.clusterName }}
      - -k=/tmp/kubeadm-patches
      - --loglevel=debug
    timeout: 5m
  - name: join
    description: |
      Join a node using file discovery (without authentication credentials)
    cmd: kinder
    args:
      - do
      - kubeadm-join
      - --name={{ .vars.clusterName }}
      - -k=/tmp/kubeadm-patches
      - --loglevel=debug
    timeout: 5m
  - name: run verify-kustomize.sh on controlplane nodes before upgrades
    cmd: kinder
    args:
      - exec
      - --name={{ .vars.clusterName }}
      - "@cp*"
      - /kinder/verify-kustomize.sh
  - name: upgrade
    description: |
      upgrades the cluster to Kubernetes "upgradeVersion"
    cmd: kinder
    args:
      - do
      - kubeadm-upgrade
      - --upgrade-version={{ .vars.kubernetesVersion }}
      - -k=/tmp/kubeadm-patches
      - --name={{ .vars.clusterName }}
  - name: run verify-kustomize.sh on controlplane nodes after upgrades
    cmd: kinder
    args:
      - exec
      - --name={{ .vars.clusterName }}
      - "@cp*"
      - /kinder/verify-kustomize.sh
  - name: get-logs
    description: |
      Collects all the test logs
    cmd: kinder
    args:
      - export
      - logs
      - --loglevel=debug
      - --name={{ .vars.clusterName }}
      - "{{ .env.ARTIFACTS }}"
    force: true
    timeout: 5m
    # kind export log is know to be flaky, so we are temporary ignoring errors in order
    # to make the test pass in case everything else passed
    # see https://github.com/kubernetes-sigs/kind/issues/456
    ignoreError: true
  - name: reset
    description: |
      Exec kubeadm reset
    cmd: kinder
    args:
      - do
      - kubeadm-reset
      - --name={{ .vars.clusterName }}
      - --loglevel=debug
    force: true
  - name: delete
    description: |
      Deletes the cluster
    cmd: kinder
    args:
      - delete
      - cluster
      - --name={{ .vars.clusterName }}
      - --loglevel=debug
    force: true
